#!/bin/bash

echo "üîÑ Sincronizaci√≥n inteligente iniciada..."

# Verificar que haya un remoto llamado origin
if ! git remote | grep -q origin; then
  echo "‚ùå No se encontr√≥ el remoto 'origin'. Abortando."
  exit 1
fi

# Traer informaci√≥n del remoto
echo "üì• Ejecutando git fetch origin..."
git fetch origin

# Verificar si hay conflicto de historia
echo "üß™ Verificando posibles conflictos de historia..."
if git pull --dry-run origin main 2>&1 | grep -q "unrelated histories"; then
  echo "‚ö†Ô∏è Conflicto de historia detectado. Ejecutando: git pull origin main --allow-unrelated-histories"
  git pull origin main --allow-unrelated-histories
else
  echo "‚úÖ Sin conflictos de historia. Ejecutando: git pull origin main"
  git pull origin main
fi

# Comparar diferencias entre local y remoto despu√©s del pull
AHEAD=$(git rev-list --left-right --count origin/main...HEAD | awk '{print $2}')
BEHIND=$(git rev-list --left-right --count origin/main...HEAD | awk '{print $1}')

if [ "$AHEAD" -gt 0 ] && [ "$BEHIND" -eq 0 ]; then
  echo "üöÄ Subiendo $AHEAD commit(s) local(es) al repositorio remoto..."
  git push origin main
elif [ "$BEHIND" -gt 0 ]; then
  echo "‚ö†Ô∏è Todav√≠a est√°s detr√°s del repositorio remoto por $BEHIND commit(s)."
  echo "üîÅ Ejecut√°: git pull origin main nuevamente o resolv√© conflictos si existen."
else
  echo "üì¶ Todo est√° sincronizado. No hay nada para subir."
fi
